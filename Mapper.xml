<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE MudletPackage>
<MudletPackage version="1.001">
    <ScriptPackage>
        <Script isActive="yes" isFolder="no">
            <name>EleMapper</name>
            <packageName></packageName>
            <script>-------------------------------------------------
--         Put your Lua functions here.        --
--                                             --
-- Note that you can also use external Scripts --
-------------------------------------------------
mudlet = mudlet or {}; mudlet.mapper_script = true

--EleMap = Geyser.Mapper:new({
--  name = &quot;EleMap&quot;,
--  x = &quot;70%&quot;, y = 0,
--  width = &quot;30%&quot;,
--  height = &quot;50%&quot;,
--})

eleMap = eleMap or {}

-- Start a new Map if nothing found/loaded


function count_rooms()
	local count = 0
	for dir, id in pairs(getRooms()) do
		count = count +1
	end
	cecho(&quot;&lt;cyan&gt;[  MAP  ]&lt;reset&gt; Total Rooms: &quot;..count..&quot;\n&quot;)
end

function get_Colours()
	for c, id in pairs(getCustomEnvColorTable()) do
		setFgColor(id[1],id[2],id[3])
		print(&quot;setRoomEnv(ID,&quot;..c..&quot;)&quot;)
	end
end


function add_room_neighbours(roomId,exits)
	local x,y,z = getRoomCoordinates(gmcp.Room.Id)
  for dir, id in pairs(exits) do
		local newx,newy,newz = calculate_Coordinates(x,y,z,dir)
		if not roomExists(id) then
      addRoom(id)
  		setRoomCoordinates(id,newx,newy,newz)
  		setRoomArea(id,getRoomArea(roomId))
	end
	if not getRoomExits(roomId)[dir] then
  		if is_standard_exit(dir) then
  			setExit(roomId,id,dir)
  			setExit(id,roomId,reversemap[dir])
  		else
  			addSpecialExit(roomId,id,dir)
  		end
--  		cecho(&quot;&lt;cyan&gt;[  MAP  ]&lt;reset&gt; Adding [&quot;..dir..&quot;] =&gt; &quot;..id..&quot;\n&quot;)
    end
  	updateMap()
	end
end

function is_standard_exit(dir)
	if dir == &quot;north&quot; then
		return true
	elseif dir == &quot;northeast&quot; then
		return true
	elseif dir == &quot;east&quot; then
		return true
	elseif dir == &quot;southeast&quot; then
		return true
	elseif dir == &quot;south&quot; then
		return true
	elseif dir == &quot;southwest&quot; then
		return true
	elseif dir == &quot;west&quot; then
		return true
	elseif dir == &quot;northwest&quot; then
		return true
	elseif dir == &quot;up&quot; then
		return true
	elseif dir == &quot;down&quot; then
		return true
	elseif dir == &quot;in&quot; then
		return true
	elseif dir == &quot;out&quot; then
		return true
	else
		return false
	end
end

function calculate_Coordinates(x,y,z,dir)
	if dir == &quot;north&quot; then
		y = y + 2
	elseif dir == &quot;northeast&quot; then
		x = x + 2
		y = y + 2
	elseif dir == &quot;east&quot; then
		x = x + 2
	elseif dir == &quot;southeast&quot; then
		x = x + 2
		y = y - 2
	elseif dir == &quot;south&quot; then
		y = y - 2
	elseif dir == &quot;southwest&quot; then
		x = x - 2
		y = y - 2
	elseif dir == &quot;west&quot; then
		x = x - 2
	elseif dir == &quot;northwest&quot; then
		x = x - 2
		y = y + 2
	elseif dir == &quot;up&quot; then
		z = z + 2
	elseif dir == &quot;down&quot; then
		z = z - 2
	else
		x = x + 1
		y = y + 1
	end
	return x,y,z
end

function find_room()
	eleMap.lastRoom = eleMap.currentRoom or gmcp.Room.Id
	eleMap.lastX,eleMap.lastY,eleMap.lastZ = getRoomCoordinates(eleMap.lastRoom) or {}
	eleMap.currentRoom = gmcp.Room.Id
	if roomExists(eleMap.currentRoom) then
		centerview(eleMap.currentRoom)
	else
		cecho(&quot;&lt;cyan&gt;[  MAP  ]&lt;reset&gt; No Room found for &lt;red&gt;&quot;..gmcp.Room.Id..&quot;&lt;reset&gt;\n&quot;)
	end
end

function add_exits()
	if roomExists(eleMap.currentRoom) then
		add_room_neighbours(gmcp.Room.Id,gmcp.Room.Exits)
	else
		find_link(gmcp.Room.Exits)
	end
end

function find_link(exits)
  for dir, id in pairs(exits) do
		if roomExists(id) then
			cecho(&quot;&lt;cyan&gt;[  MAP  ]&lt;reset&gt; Found adjoining room =&gt;&lt;red&gt;&quot;..id..&quot;&lt;reset&gt; &quot;..exitmap[reversemap[dir]]..&quot;\n&quot;)
			local x,y,z = getRoomCoordinates(id)
			local newx,newy,newz = calculate_Coordinates(x,y,z,exitmap[reversemap[dir]])
			add_room(eleMap.currentRoom,newx,newy,newz,getRoomArea(eleMap.lastRoom))
			break
		end
	end
	if not roomExists(gmcp.Room.Id) then
			local x,y,z = getRoomCoordinates(eleMap.lastRoom)
			add_room(eleMap.currentRoom,x+1,y+1,z,getRoomArea(eleMap.lastRoom))
			cecho(&quot;&lt;cyan&gt;[  MAP  ]&lt;reset&gt; I didn't know where to put this room! [&quot;..gmcp.Room.Id..&quot;] please move it manually (New Zone?)\n&quot;)
	end
end

function add_room(id,x,y,z,area)
	addRoom(id)
	setRoomCoordinates(id,x,y,z)
	setRoomArea(id,area)
	centerview(id)
	add_room_neighbours(id,gmcp.Room.Exits)
end

function purge_map()
	for id, room in pairs(getRooms()) do
		deleteRoom(id)
		print(&quot;&lt;cyan&gt;[  MAP  ]&lt;reset&gt; Deleting =&gt; &quot;..id..&quot;\n&quot;)
	end	
end

reversemap = {
  n = 6,
  north = 6,
  ne = 8,
  northeast = 8,
  nw = 7,
  northwest = 7,
  e = 5,
  east = 5,
  w = 4,
  west = 4,
  s = 1,
  south = 1,
  se = 3,
  southeast = 3,
  sw = 2,
  southwest = 2,
  u = 10,
  up = 10,
  d = 9,
  down = 9,
  [&quot;in&quot;] = 12,
  out = 11}
exitmap = {
  n = 1,
  north = 1,
  ne = 2,
  northeast = 2,
  nw = 3,
  northwest = 3,
  e = 4,
  east = 4,
  w = 5,
  west = 5,
  s = 6,
  south = 6,
  se = 7,
  southeast = 7,
  sw = 8,
  southwest = 8,
  u = 9,
  up = 9,
  d = 10,
  down = 10,
  [&quot;in&quot;] = 11,
  out = 12,
  [1] = &quot;north&quot;,
  [2] = &quot;northeast&quot;,
  [3] = &quot;northwest&quot;,
  [4] = &quot;east&quot;,
  [5] = &quot;west&quot;,
  [6] = &quot;south&quot;,
  [7] = &quot;southeast&quot;,
  [8] = &quot;southwest&quot;,
  [9] = &quot;up&quot;,
  [10] = &quot;down&quot;,
  [11] = &quot;in&quot;,
  [12] = &quot;out&quot;,
}	

function mapper_Installed()
	cecho(&quot;&lt;cyan&gt;[  MAP  ]&lt;reset&gt; EleMap Installed\n&quot;)
  if next(getRooms()) == nil then
  	cecho(&quot;&lt;cyan&gt;[  MAP  ]&lt;reset&gt; NEW MAP STARTED\n&quot;)
  	cecho(&quot;&lt;cyan&lt;[  MAP  ]&lt;reset&gt; Adding first room &quot;..gmcp.Room.Id..&quot;\n&quot;)
  	setAreaName(1,&quot;Drakenwood&quot;)
  	setAreaName(2,&quot;Valena&quot;)
  	setAreaName(3,&quot;Rosfarren&quot;)
  	setAreaName(4,&quot;Aerdy&quot;)
		setAreaName(5,&quot;Dun Glenderry&quot;)
  	addRoom(gmcp.Room.Id)
  	setRoomCoordinates(gmcp.Room.Id,0,0,0)
  	setRoomArea(gmcp.Room.Id,1)
  	centerview(gmcp.Room.Id)
  	add_room_neighbours(gmcp.Room.Id,gmcp.Room.Exits)
  	updateMap()
  end
end

function doSpeedWalk()
    -- we can do a lot here, this fires when a room is double clicked on, and is intended to speedwalk to it
    print(&quot;Path to &quot; .. getRoomName(speedWalkPath[#speedWalkPath]) .. &quot;: &quot; .. table.concat(speedWalkDir, &quot;, &quot;))
		speedwalk(table.concat(speedWalkDir, &quot;, &quot;),false,0.36)
end

function onSymbol(...)
	local style = arg[2]
	local rooms = arg[3]
	if style == &quot;Post Office&quot; then
		for i = 3,arg['n'] do
			setRoomChar(arg[i],&quot;‚úâ&quot;)
	  end
	elseif style == &quot;Store&quot; then
		for i = 3,arg['n'] do
			setRoomChar(arg[i],&quot;üõí&quot;)
	  end
	elseif style == &quot;Bank&quot; then
		for i = 3,arg['n'] do
			setRoomChar(arg[i],&quot;üí∞&quot;)
	  end
	elseif style == &quot;Stable&quot; then
		for i = 3,arg['n'] do
			setRoomChar(arg[i],&quot;üê¥&quot;)
	  end
	elseif style == &quot;Clear&quot; then
		for i = 3,arg['n'] do
			setRoomChar(arg[i],&quot;&quot;)
	  end
	end
end

addMapMenu(&quot;Add Symbol&quot;)
addMapEvent(&quot;Post Office&quot;, &quot;onSymbol&quot;,&quot;Add Symbol&quot;)
addMapEvent(&quot;Store&quot;, &quot;onSymbol&quot;,&quot;Add Symbol&quot;)
addMapEvent(&quot;Stable&quot;, &quot;onSymbol&quot;,&quot;Add Symbol&quot;)
addMapEvent(&quot;Bank&quot;, &quot;onSymbol&quot;,&quot;Add Symbol&quot;)
addMapEvent(&quot;Clear&quot;, &quot;onSymbol&quot;,&quot;Add Symbol&quot;)

registerAnonymousEventHandler(&quot;onSymbol&quot;, &quot;onSymbol&quot;)
registerAnonymousEventHandler(&quot;gmcp.Room.Id&quot;, &quot;find_room&quot;)
registerAnonymousEventHandler(&quot;gmcp.Room.Exits&quot;, &quot;add_exits&quot;)
registerAnonymousEventHandler(&quot;sysInstall&quot;, &quot;mapper_Installed&quot;)
</script>
            <eventHandlerList/>
        </Script>
    </ScriptPackage>
</MudletPackage>
