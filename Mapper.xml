<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE MudletPackage>
<MudletPackage version="1.001">
	<ScriptPackage>
		<Script isActive="yes" isFolder="no">
			<name>EleMapper</name>
			<packageName></packageName>
			<script>-------------------------------------------------
--         Put your Lua functions here.        --
--                                             --
-- Note that you can also use external Scripts --
-------------------------------------------------
--
-- v0.2
--
-- eleMap.currentRoom = Mudlet room ID
--

mudlet = mudlet or {}; mudlet.mapper_script = true
eleMap = eleMap or {}
eleMap.mode = 0 				-- 1 = edit, 0=follow

function count_rooms()
	local count = 0
	for dir, id in pairs(getRooms()) do
		count = count +1
	end
	cecho("&lt;cyan&gt;[  MAP  ]&lt;reset&gt; Total Rooms: "..count.."\n")
end

function get_Colours()
	for c, id in pairs(getCustomEnvColorTable()) do
		setFgColor(id[1],id[2],id[3])
		print("setRoomEnv(ID,"..c..")")
	end
end


function add_room_neighbours(realID,exits)
	local x,y,z = getRoomCoordinates(realID)
  for dir, exitHash in pairs(exits) do
		if not roomExists(getRoomIDbyHash(exitHash)) then
			local newx,newy,newz = calculate_Coordinates(x,y,z,dir)
			local newID = createRoomID()
      addRoom(newID)
  		setRoomCoordinates(newID,newx,newy,newz)
  		setRoomArea(newID,getRoomArea(realID))
			setRoomIDbyHash(newID,exitHash)
		end
		if not getRoomExits(realID)[dir] then
  		if is_standard_exit(dir) then
  			setExit(realID,getRoomIDbyHash(exitHash),dir)
  			setExit(getRoomIDbyHash(exitHash),realID,reversemap[dir])
  		else
  			addSpecialExit(realID,getRoomIDbyHash(exitHash),dir)
  		end
    end
	end
	updateMap()
end

function is_standard_exit(dir)
	if dir == "north" then
		return true
	elseif dir == "northeast" then
		return true
	elseif dir == "east" then
		return true
	elseif dir == "southeast" then
		return true
	elseif dir == "south" then
		return true
	elseif dir == "southwest" then
		return true
	elseif dir == "west" then
		return true
	elseif dir == "northwest" then
		return true
	elseif dir == "up" then
		return true
	elseif dir == "down" then
		return true
	elseif dir == "in" then
		return true
	elseif dir == "out" then
		return true
	else
		return false
	end
end

function calculate_Coordinates(x,y,z,dir)
	if dir == "north" then
		y = y + 2
	elseif dir == "northeast" then
		x = x + 2
		y = y + 2
	elseif dir == "east" then
		x = x + 2
	elseif dir == "southeast" then
		x = x + 2
		y = y - 2
	elseif dir == "south" then
		y = y - 2
	elseif dir == "southwest" then
		x = x - 2
		y = y - 2
	elseif dir == "west" then
		x = x - 2
	elseif dir == "northwest" then
		x = x - 2
		y = y + 2
	elseif dir == "up" then
		z = z + 2
	elseif dir == "down" then
		z = z - 2
	else
		x = x + 1
		y = y + 1
	end
	return x,y,z
end

function find_room()
	eleMap.lastRoom = eleMap.currentRoom or gmcp.Room.Id
	eleMap.currentRoom = getRoomIDbyHash(gmcp.Room.Id)
	if roomExists(eleMap.currentRoom) then
		centerview(eleMap.currentRoom)
	else 
		cecho("&lt;cyan&gt;[  MAP  ]&lt;reset&gt; No Room found for &lt;red&gt;"..gmcp.Room.Id.."&lt;reset&gt;\n")
	end
end

function add_exits()
	local startMatrix = getStopWatchTime(mapMatrix)	
	local newID = createRoomID()
	if roomExists(eleMap.currentRoom) then
		add_room_neighbours(eleMap.currentRoom,gmcp.Room.Exits)
	else
		find_link(gmcp.Room.Exits)
	end
end

function find_link(exits)
  for dir, id in pairs(exits) do
		local roomID = getRoomIDbyHash(id)
		if roomExists(roomID) then
			cecho("&lt;cyan&gt;[  MAP  ]&lt;reset&gt; Found adjoining room =&gt;&lt;red&gt;"..id.."&lt;reset&gt; "..exitmap[reversemap[dir]].."\n")
			local x,y,z = getRoomCoordinates(roomID)
			local newx,newy,newz = calculate_Coordinates(x,y,z,exitmap[reversemap[dir]])
--			add_room(eleMap.currentRoom,newx,newy,newz,getRoomArea(eleMap.lastRoom))
			add_room(gmcp.Room.Id,newx,newy,newz,getRoomArea(eleMap.lastRoom))
			break
		end
	end
	if not roomExists(getRoomIDbyHash(gmcp.Room.Id)) then
			local x,y,z = getRoomCoordinates(eleMap.lastRoom)
			add_room(eleMap.currentRoom,x+1,y+1,z,getRoomArea(eleMap.lastRoom))
			cecho("&lt;cyan&gt;[  MAP  ]&lt;reset&gt; I didn't know where to put this room! ["..gmcp.Room.Id.."] please move it manually (New Zone?)\n")
	end
end

function add_room(hashID,x,y,z,area)
	local newID = createRoomID()
--print("Adding room id "..newID.." Hash:"..hashID)
	if hashId ~= -1 then
  	addRoom(newID)
  	setRoomCoordinates(newID,x,y,z)
  	setRoomArea(newID,area)
  	setRoomIDbyHash(newID,hashID)
  	centerview(newID)
  	add_room_neighbours(newID,gmcp.Room.Exits)
	end
end

function purge_map()
	for id, room in pairs(getRooms()) do
		deleteRoom(id)
		print("&lt;cyan&gt;[  MAP  ]&lt;reset&gt; Deleting =&gt; "..id.."\n")
	end	
end

reversemap = {
  n = 6,
  north = 6,
  ne = 8,
  northeast = 8,
  nw = 7,
  northwest = 7,
  e = 5,
  east = 5,
  w = 4,
  west = 4,
  s = 1,
  south = 1,
  se = 3,
  southeast = 3,
  sw = 2,
  southwest = 2,
  u = 10,
  up = 10,
  d = 9,
  down = 9,
  ["in"] = 12,
  out = 11}
exitmap = {
  n = 1,
  north = 1,
  ne = 2,
  northeast = 2,
  nw = 3,
  northwest = 3,
  e = 4,
  east = 4,
  w = 5,
  west = 5,
  s = 6,
  south = 6,
  se = 7,
  southeast = 7,
  sw = 8,
  southwest = 8,
  u = 9,
  up = 9,
  d = 10,
  down = 10,
  ["in"] = 11,
  out = 12,
  [1] = "north",
  [2] = "northeast",
  [3] = "northwest",
  [4] = "east",
  [5] = "west",
  [6] = "south",
  [7] = "southeast",
  [8] = "southwest",
  [9] = "up",
  [10] = "down",
  [11] = "in",
  [12] = "out",
}	

function mapper_Installed(_, name)
	if name ~= "Mapper" then return end
	cecho("&lt;cyan&gt;[  MAP  ]&lt;reset&gt; EleMap Installed\n")
	convert_map_to_hash()
  if next(getRooms()) == nil then
  	cecho("&lt;cyan&gt;[  MAP  ]&lt;reset&gt; NEW MAP STARTED\n")
  	cecho("&lt;cyan&lt;[  MAP  ]&lt;reset&gt; Adding first room "..gmcp.Room.Id.." Assuming your in Drakenwood, Manually move to new zone if not!\n")
  	setAreaName(1,"Drakenwood")
  	setAreaName(2,"Valena")
  	setAreaName(3,"Rosfarren")
  	setAreaName(4,"Aerdy")
		setAreaName(5,"Dun Glenderry")
		local newID = createRoomID()
  	addRoom(newID)
  	setRoomCoordinates(newID,0,0,0)
  	setRoomArea(newID,1)
		setRoomIDbyHash(newID,gmcp.Room.Id)
  	centerview(newID)
  	add_room_neighbours(getRoomIDbyHash(gmcp.Room.Id),gmcp.Room.Exits)
  	updateMap()
  end
end

function doSpeedWalk()
		speedwalk(table.concat(speedWalkDir, ", "),false,0.36)
end

function onSymbol(...)
	local style = arg[2]
	local rooms = arg[3]
	if style == "Post Office" then
		for i = 3,arg['n'] do
			setRoomChar(arg[i],"‚úâ")
	  end
	elseif style == "Store" then
		for i = 3,arg['n'] do
			setRoomChar(arg[i],"üõí")
	  end
	elseif style == "Bank" then
		for i = 3,arg['n'] do
			setRoomChar(arg[i],"üí∞")
	  end
	elseif style == "Stable" then
		for i = 3,arg['n'] do
			setRoomChar(arg[i],"üê¥")
	  end
	elseif style == "Book" then
		for i = 3,arg['n'] do
			setRoomChar(arg[i],"üìñ")
	  end
	elseif style == "Bar" then
		for i = 3,arg['n'] do
			setRoomChar(arg[i],"üç∫")
	  end
	elseif style == "Swords" then
		for i = 3,arg['n'] do
			setRoomChar(arg[i],"üíé")
	  end
	elseif style == "Swords" then
		for i = 3,arg['n'] do
			setRoomChar(arg[i],"‚öî")
	  end
	elseif style == "Clear" then
		for i = 3,arg['n'] do
			setRoomChar(arg[i],"")
	  end
	end
end

function convert_map_to_hash()
	cecho("&lt;cyan&gt;[  MAP  ]&lt;reset&gt; Checking if map needs converting to GUID\n")
	local converted = 0
	for id, room in pairs(getRooms()) do
		if getRoomIDbyHash(id) == -1 then
			setRoomIDbyHash(id, id)		
			converted = converted + 1
		end
	end
	if converted&gt;0 then
	cecho("&lt;cyan&gt;[  MAP  ]&lt;reset&gt; Converted "..converted.." rooms\n")
	end
end

function mapWindowOpen()
	mapMatrix = mapMatrix or createStopWatch()
  addMapMenu("Add Symbol")
  addMapEvent("Post Office", "onSymbol","Add Symbol")
  addMapEvent("Store", "onSymbol","Add Symbol")
  addMapEvent("Stable", "onSymbol","Add Symbol")
  addMapEvent("Bank", "onSymbol","Add Symbol")
  addMapEvent("Book", "onSymbol","Add Symbol")
  addMapEvent("Swords", "onSymbol","Add Symbol")
  addMapEvent("Bar", "onSymbol","Add Symbol")
  addMapEvent("Gem", "onSymbol","Add Symbol")
  addMapEvent("Clear", "onSymbol","Add Symbol")
	convert_map_to_hash()
	find_room()
	if not mapAlias1 then tempAlias("^map count$",[[count_rooms()]]) end
	if not mapAlias2 then tempAlias("^map colours$",[[get_Colours()]]) end
	if not mapAlias3 then tempAlias("^map purge$",[[purge_map()]]) end
	if not mapAlias4 then tempAlias("^map convert$",[[convert_map_to_hash()]]) end
end

registerAnonymousEventHandler("mapOpenEvent", "mapWindowOpen")
registerAnonymousEventHandler("onSymbol", "onSymbol")
registerAnonymousEventHandler("gmcp.Room.Id", "find_room")
registerAnonymousEventHandler("gmcp.Room.Exits", "add_exits")
registerAnonymousEventHandler("sysInstall", "mapper_Installed")
</script>
			<eventHandlerList />
		</Script>
	</ScriptPackage>
</MudletPackage>
